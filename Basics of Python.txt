Write a Python program that checks whether a given number is prime or not. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.
Ans:- def is_prime(n):
    """
    Returns True if n is a prime number, False otherwise.
    """
    if n <= 1:
        return False
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False
    return True

# Test the function
num = int(input("Enter a number: "))
if is_prime(num):
    print(f"{num} is a prime number.")
else:
    print(f"{num} is not a prime number.")

Code Explaination:- 
The is_prime function takes an integer n as input.
If n is less than or equal to 1, it's not prime, so we return False.
We use a loop to check if n has any divisors other than 1 and itself. We only need to check up to the square root of n because if n has a divisor greater than its square root, it would have already been found by a smaller divisor.
Inside the loop, we check if n is divisible by i using the modulo operator (%). If it is, we return False because n is not prime.
If the loop completes without finding any divisors, we return True because n is prime.
In the main part of the program, we prompt the user to enter a number and store it in the num variable.
We call the is_prime function with num as input and print the result.

Out Put:- 

Enter a number: 25
25 is not a prime number.

Enter a number: 23
23 is a prime number.


Develop a Python program that generates two random numbers and asks the user to enter the product of these numbers. The program should then check if the user's answer is correct and display an appropriate message.
Ans:- import random

# Generate two random numbers
num1 = random.randint(1, 10)
num2 = random.randint(1, 10)

# Calculate the product
product = num1 * num2

# Ask the user to enter the product
user_answer = int(input(f"What is the product of {num1} and {num2}? "))

# Check if the user's answer is correct
if user_answer == product:
    print("Correct! The product is indeed", product)
else:
    print(f"Sorry, that's incorrect. The correct answer is {product}.")

Explaination :- 

We import the random module to generate random numbers.
We generate two random numbers num1 and num2 between 1 and 10 using random.randint.
We calculate the product of num1 and num2 and store it in the product variable.
We ask the user to enter the product of num1 and num2 using input. We use an f-string to format the prompt with the values of num1 and num2.
We convert the user's input to an integer using int.
We check if the user's answer is correct by comparing it to the product variable. If it's correct, we print a success message. Otherwise, we print an error message with the correct answer.

Out Put:- 

What is the product of 4 and 7? 28
Correct! The product is indeed 28

What is the product of 3 and 9? 25
Sorry, that's incorrect. The correct answer is 27.

Create a Python script that prints the squares of all even or odd numbers within the range of 100 to 200. Choose either even or odd numbers and document your choice in the code.
Ans:- 
"""
Prints the squares of all even numbers within the range of 100 to 200.
"""
for num in range(100, 201):  # 201 is used to include 200 in the range
    if num % 2 == 0:  # Check if the number is even
        square = num ** 2
        print(f"The square of {num} is {square}")

Explaination:- 

We use a for loop to iterate over the range of numbers from 100 to 200 (inclusive).
Inside the loop, we check if the current number num is even by using the modulo operator (%). If num is even, num % 2 will be 0.
If num is even, we calculate its square using the exponentiation operator (**).
We print the result using an f-string, which allows us to insert the values of num and square into the string.

OutPut:- 

The square of 100 is 10000
The square of 102 is 10404
The square of 104 is 10816
...
The square of 200 is 40000

write a program to count the number of words in a given text.
example:
input_text = "This is a sample text. This text will be used to demonstrate the word counter."
Expected output:
'This': 2 
'is': 1
'a': 1
'sample': 1
'text.': 1

Ans :- 

def count_words(input_text):
    """
    Counts the number of occurrences of each word in the input text.

    Args:
        input_text (str): The input text to count words from.

    Returns:
        dict: A dictionary where each key is a word and the value is the count of that word.
    """
    # Split the input text into individual words
    words = input_text.split()

    # Create a dictionary to store the word counts
    word_counts = {}

    # Iterate over the words
    for word in words:
        # Remove punctuation from the word
        word = word.strip('.,;:!?"\'').lower()

        # If the word is already in the dictionary, increment its count
        if word in word_counts:
            word_counts[word] += 1
        # Otherwise, add the word to the dictionary with a count of 1
        else:
            word_counts[word] = 1

    # Return the word counts dictionary
    return word_counts

# Example usage
input_text = "This is a sample text. This text will be used to demonstrate the word counter."
word_counts = count_words(input_text)

# Print the word counts
for word, count in word_counts.items():
    print(f"'{word}': {count}")

Code Explaination:- 

The count_words function takes an input text as a string and returns a dictionary where each key is a word and the value is the count of that word.
We split the input text into individual words using the split() method.
We create an empty dictionary word_counts to store the word counts.
We iterate over the words and remove punctuation from each word using the strip() method. We also convert the word to lowercase to ignore case differences.
If the word is already in the dictionary, we increment its count by 1. Otherwise, we add the word to the dictionary with a count of 1.
Finally, we return the word_counts dictionary.
In the example usage, we call the count_words function with the input text and store the result in the word_counts dictionary.
We print the word counts using a for loop, iterating over the items in the word_counts dictionary.

OutPut:- 

'This': 2
'is': 1
'a': 1
'sample': 1
'text': 2
'will': 1
'be': 1
'used': 1
'to': 1
'demonstrate': 1
'the': 1
'word': 1
'counter': 1

Write a Python function called is_palindrome that takes a string as input and returns True if the string is a palindrome, and False otherwise. A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward, ignoring spaces, punctuation, and capitalization.
Example:
Input: "racecar"
Expected Output: True
Ans:- 
def is_palindrome(s):
    """
    Checks if a given string is a palindrome.

    Args:
        s (str): The input string to check.

    Returns:
        bool: True if the string is a palindrome, False otherwise.
    """
    # Remove spaces and punctuation, and convert to lowercase
    s = ''.join(e for e in s if e.isalnum()).lower()

    # Compare the string with its reverse
    return s == s[::-1]

# Example usage
print(is_palindrome("racecar"))  # True
print(is_palindrome("hello"))  # False

Explaination:- 

The is_palindrome function takes a string s as input and returns a boolean value indicating whether the string is a palindrome.
We use a generator expression to remove spaces and punctuation from the input string, and convert it to lowercase using the isalnum() method and the lower() method. This ensures that we ignore case differences and non-alphanumeric characters.
We then compare the resulting string with its reverse using slicing (s[::-1]). If the string is the same when reversed, it's a palindrome.
The function returns True if the string is a palindrome, and False otherwise.


